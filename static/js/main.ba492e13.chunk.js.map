{"version":3,"sources":["App.module.css","Components/Navbav.jsx","Components/Event.jsx","notifications .js","Components/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","wrapperCalendar","event","number","name","startDate","Navbar","react_default","a","createElement","className","s","Event","props","city","country","onChange","addPrompt","data-day","selected","spawnNotification","title","n","Notification","setTime","day","setTimeout","alert","concat","Calendar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","dataConference","id","_this2","events","map","item","Components_Event","key","e","notification","target","value","console","log","Component","App","Fragment","Navbav","Components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","requestPermission","result"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,OAAA,oBAAAC,gBAAA,6BAAAC,MAAA,mBAAAC,OAAA,oBAAAC,KAAA,kBAAAC,UAAA,qLCUHC,EATA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEX,QACdO,EAAAC,EAAAC,cAAA,iGCaGG,EAfD,SAACC,GACX,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,OACdK,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAEN,WAAYQ,EAAMR,WACrCE,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAEP,MAAOS,EAAMT,MAChCG,EAAAC,EAAAC,cAAA,YAAOI,EAAMC,KAAM,KAAMD,EAAME,SAC/BR,EAAAC,EAAAC,cAAA,UAAQO,SAAUH,EAAMI,UAAWP,UAAU,QACzCH,EAAAC,EAAAC,cAAA,UAAQS,WAAU,GAAlB,KACAX,EAAAC,EAAAC,cAAA,UAAQS,WAAU,GAAlB,KACAX,EAAAC,EAAAC,cAAA,UAAQS,WAAU,GAAIC,SAAS,YAA/B,SCAT,SAASC,EAAkBC,GAChC,IAAIC,EAAI,IAAIC,aAAaF,GAMzB,OALAC,EAAEE,QAAU,SAAUC,GACpBC,WAAW,WACTC,MAAK,oBAAAC,OAAqBH,EAArB,YACE,GAANA,EAAW,KAAO,MAEhBH,MC4BMO,cAxCX,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KACDwB,KAAOC,EACZR,EAAKS,GAAK,EAHKT,wEAKV,IAAAU,EAAAP,KACDQ,EAASR,KAAKI,KAAKK,IAAI,SAACC,GACxB,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,CACHxC,KAAMuC,EAAKvC,KACXyC,IAAG,GAAAjB,OAAKY,EAAKD,MACbzB,KAAM6B,EAAK7B,KACXC,QAAS4B,EAAK5B,QACdV,UAAWsC,EAAKtC,UAChBY,UAAWuB,EAAKvB,cAGxB,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,iBACbwC,qCAIHK,GACN,IAAIC,EAAe3B,IACnB,OAAQ0B,EAAEE,OAAOC,OAEb,IAAK,IAAKC,QAAQC,IAAI,KAElBJ,EAAavB,QAAQ,GACrB,MACJ,IAAK,IAAK0B,QAAQC,IAAI,KAClBJ,EAAavB,QAAQ,GACrB,MACJ,IAAK,KAAM0B,QAAQC,IAAI,MACnBJ,EAAavB,QAAQ,YAnCd4B,aCORC,EATH,WACV,OACE9C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eHlIjBjD,aAAakD,oBAAoBH,KAAK,SAAUI,GAC/B,WAAXA,EAIW,YAAXA,IACFxB,QAAQC,IAAI,WACZ/B,EAAkB,2BALlB8B,QAAQC,IAAI","file":"static/js/main.ba492e13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"App_navbar__ucOE-\",\"wrapperCalendar\":\"App_wrapperCalendar__3Z5EC\",\"event\":\"App_event__3CMBE\",\"number\":\"App_number__1x8fZ\",\"name\":\"App_name__2DU7m\",\"startDate\":\"App_startDate__iJlq9\"};","import React from 'react';\r\nimport s from '../../src/App.module.css';\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <span>Frontend Developer Conference in 2019</span>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from '../../src/App.module.css';\r\n\r\nconst Event = (props) => {\r\n    return (\r\n        <div className={s.event}>\r\n            <span className={s.startDate}>{props.startDate}</span>\r\n            <span className={s.name}>{props.name}</span>\r\n            <span>{props.city}{', '}{props.country}</span>\r\n            <select onChange={props.addPrompt} className='menu'>\r\n                <option data-day={3} >3</option>\r\n                <option data-day={7}>7</option>\r\n                <option data-day={14} selected='selected'>14</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Event;","export function startOfNotifications() {\r\n  Notification.requestPermission().then(function (result) {\r\n    if (result === 'denied') {\r\n      console.log('denied');\r\n      return;\r\n    }\r\n    if (result === 'granted') {\r\n      console.log('granted');\r\n      spawnNotification('you have meeting today');\r\n    }\r\n  });\r\n}\r\nexport function spawnNotification(title) {\r\n  let n = new Notification(title);\r\n  n.setTime = function (day) {\r\n    setTimeout(() => {\r\n      alert(`you have meeting ${day} today`);\r\n    }, day * 24 * 3600 * 1000);\r\n  }\r\n  return n;\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport s from '../../src/App.module.css';\r\nimport dataConference from '../../src/data-conference.json';\r\nimport Event from './Event';\r\nimport { spawnNotification } from '../../src/notifications '\r\n\r\nclass Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = dataConference;\r\n        this.id = 1;\r\n    };\r\n    render() {\r\n        let events = this.data.map((item) => {\r\n            return <Event\r\n                name={item.name}\r\n                key={`${this.id++}`}\r\n                city={item.city}\r\n                country={item.country}\r\n                startDate={item.startDate}\r\n                addPrompt={this.addPrompt}\r\n            />\r\n        })\r\n        return (\r\n            <div className={s.wrapperCalendar}>\r\n                {events}\r\n            </div>\r\n        )\r\n    }\r\n    addPrompt(e) {\r\n        let notification = spawnNotification();\r\n        switch (e.target.value) {\r\n\r\n            case '3': console.log('3');\r\n\r\n                notification.setTime(3);\r\n                break;\r\n            case '7': console.log('7');\r\n                notification.setTime(7);\r\n                break;\r\n            case '14': console.log('14');\r\n                notification.setTime(14);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n}\r\nexport default Calendar;","import React from 'react';\nimport Navbar from './Components/Navbav';\nimport Calendar from './Components/Calendar';\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n      <Calendar />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as notifications from './notifications '\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// debugger;\nnotifications.startOfNotifications();\n"],"sourceRoot":""}